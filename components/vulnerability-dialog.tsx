import { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from '@/components/ui/dialog';
import {
  AlertTriangle,
  XCircle,
  Shield,
  Clock,
  User,
  CalendarDays,
  FileCode,
  AlertCircle,
  Check,
  Loader2,
  Download,
} from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { formatDate } from '@/lib/utils';
import Markdown from 'react-markdown';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';
import rehypeRaw from 'rehype-raw';

interface TextRange {
  startLine: number;
  endLine: number;
  startOffset: number;
  endOffset: number;
}

interface Vulnerability {
  key: string;
  component: string;
  project: string;
  securityCategory: string;
  vulnerabilityProbability: 'LOW' | 'MEDIUM' | 'HIGH';
  status: 'TO_REVIEW' | 'IN_REVIEW' | 'REVIEWED';
  line: number;
  message: string;
  author: string;
  creationDate: string;
  updateDate: string;
  textRange: TextRange;
  ruleKey: string;
}

interface VulnerabilityDialogProps {
  vulnerability: Vulnerability | null;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function VulnerabilityDialog({
  vulnerability,
  open,
  onOpenChange,
}: VulnerabilityDialogProps) {
  const [analysis, setAnalysis] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [rawData, setRawData] = useState<any>(null);

  useEffect(() => {
    if (open && vulnerability) {
      fetchAnalysis(vulnerability);
    } else {
      // Reset state when dialog closes
      setAnalysis(null);
      setIsLoading(false);
      setError(null);
      setRawData(null);
    }
  }, [open, vulnerability]);

  const fetchAnalysis = async (vuln: Vulnerability) => {
    try {
      setIsLoading(true);
      setError(null);

      const response = await fetch('/api/gemini', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ vulnerability: vuln }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('Error fetching analysis:', errorData);
        throw new Error(errorData.error || 'Failed to analyze vulnerability');
      }

      const data = await response.json();
      setAnalysis(data.analysis);
      setRawData(data.rawData);
    } catch (error) {
      console.error('Error fetching analysis:', error);
      setError(
        error instanceof Error
          ? error.message
          : 'Failed to analyze vulnerability. Please try again later.'
      );
    } finally {
      setIsLoading(false);
    }
  };

  const handleDownloadAnalysis = () => {
    if (!analysis || !vulnerability) return;
    
    const fileName = `vulnerability-analysis-${vulnerability.key}.md`;
    const blob = new Blob([analysis], { type: 'text/markdown' });
    const href = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = href;
    link.download = fileName;
    document.body.appendChild(link);
    link.click();
    
    document.body.removeChild(link);
    URL.revokeObjectURL(href);
  };

  if (!vulnerability) return null;

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'HIGH':
        return <XCircle className="h-5 w-5 text-destructive" />;
      case 'MEDIUM':
        return <AlertTriangle className="h-5 w-5 text-yellow-500" />;
      case 'LOW':
        return <AlertCircle className="h-5 w-5 text-green-500" />;
      default:
        return <AlertCircle className="h-5 w-5 text-muted-foreground" />;
    }
  };

  const getStatusDetails = (status: string) => {
    switch (status) {
      case 'TO_REVIEW':
        return {
          color: 'bg-destructive',
          icon: <Clock className="h-4 w-4" />,
          text: 'To Review',
        };
      case 'IN_REVIEW':
        return {
          color: 'bg-yellow-500',
          icon: <Clock className="h-4 w-4" />,
          text: 'In Review',
        };
      case 'REVIEWED':
        return {
          color: 'bg-green-500',
          icon: <Check className="h-4 w-4" />,
          text: 'Reviewed',
        };
      default:
        return {
          color: 'bg-muted',
          icon: <Clock className="h-4 w-4" />,
          text: 'Unknown',
        };
    }
  };

  const statusDetails = getStatusDetails(vulnerability.status);

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <div className="flex items-center gap-2">
            {getSeverityIcon(vulnerability.vulnerabilityProbability)}
            <DialogTitle className="text-lg">
              {vulnerability.message}
            </DialogTitle>
          </div>
          <DialogDescription>
            <div className="flex items-center gap-2 mt-1">
              <Badge
                variant="outline"
                className={`${statusDetails.color} text-white`}
              >
                <span className="flex items-center gap-1">
                  {statusDetails.icon}
                  {statusDetails.text}
                </span>
              </Badge>
              <Badge variant="outline" className="font-mono">
                {vulnerability.key}
              </Badge>
            </div>
          </DialogDescription>
        </DialogHeader>

        <Tabs defaultValue="details" className="mt-2">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="details">Vulnerability Details</TabsTrigger>
            <TabsTrigger value="analysis">AI Analysis</TabsTrigger>
          </TabsList>
          
          <TabsContent value="details" className="space-y-4 mt-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium">Location</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <FileCode className="h-4 w-4 text-muted-foreground" />
                      <span className="font-mono text-sm">{vulnerability.component}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <AlertTriangle className="h-4 w-4 text-muted-foreground" />
                      <span>Line {vulnerability.line}</span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium">Classification</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <Shield className="h-4 w-4 text-muted-foreground" />
                      <span>Category: {vulnerability.securityCategory}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <AlertCircle className="h-4 w-4 text-muted-foreground" />
                      <span>
                        Severity:{' '}
                        <span
                          className={`font-medium ${
                            vulnerability.vulnerabilityProbability === 'HIGH'
                              ? 'text-destructive'
                              : vulnerability.vulnerabilityProbability === 'MEDIUM'
                              ? 'text-yellow-500'
                              : 'text-green-500'
                          }`}
                        >
                          {vulnerability.vulnerabilityProbability}
                        </span>
                      </span>
                    </div>
                    <div className="flex items-center gap-2">
                      <FileCode className="h-4 w-4 text-muted-foreground" />
                      <span className="font-mono text-xs">
                        Rule: {vulnerability.ruleKey}
                      </span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium">History</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <User className="h-4 w-4 text-muted-foreground" />
                      <span>Author: {vulnerability.author}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <CalendarDays className="h-4 w-4 text-muted-foreground" />
                      <span>Created: {formatDate(vulnerability.creationDate)}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <CalendarDays className="h-4 w-4 text-muted-foreground" />
                      <span>Updated: {formatDate(vulnerability.updateDate)}</span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium">Description</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm">{vulnerability.message}</p>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="analysis" className="space-y-4 mt-4">
            {isLoading ? (
              <div className="flex flex-col items-center justify-center p-12 space-y-4 text-center">
                <Loader2 className="h-8 w-8 animate-spin text-primary" />
                <p className="text-muted-foreground">Analyzing vulnerability with AI...</p>
              </div>
            ) : error ? (
              <Card className="border-destructive">
                <CardContent className="pt-6">
                  <div className="flex flex-col items-center justify-center space-y-2 text-center">
                    <AlertCircle className="h-8 w-8 text-destructive" />
                    <p className="font-medium">Failed to load analysis</p>
                    <p className="text-sm text-muted-foreground">{error}</p>
                  </div>
                </CardContent>
              </Card>
            ) : analysis ? (
              <div className="space-y-4">
                <div className="flex justify-end">
                  <Button 
                    variant="outline" 
                    size="sm" 
                    className="gap-2" 
                    onClick={handleDownloadAnalysis}
                  >
                    <Download className="h-4 w-4" />
                    Download Analysis
                  </Button>
                </div>
                <Card>
                  <CardHeader className="pb-2 flex flex-row items-center justify-between">
                    <CardTitle className="text-sm font-medium flex items-center gap-2">
                      <Shield className="h-4 w-4 text-primary" />
                      AI Security Analysis
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="prose dark:prose-invert prose-headings:font-bold prose-headings:text-primary prose-a:text-blue-600 dark:prose-a:text-blue-400 prose-code:text-sm max-w-none">
                    <Markdown
                      rehypePlugins={[rehypeRaw]}
                      components={{
                        h1: ({ node, ...props }) => (
                          <h1 className="text-xl font-bold text-primary mb-4 border-b pb-2" {...props} />
                        ),
                        h2: ({ node, ...props }) => (
                          <h2 className="text-lg font-bold text-primary mt-6 mb-3" {...props} />
                        ),
                        h3: ({ node, ...props }) => (
                          <h3 className="text-md font-bold text-foreground mt-4 mb-2" {...props} />
                        ),
                        code: ({ node, className, children, ...props }) => {
                          const match = /language-(\w+)/.exec(className || '');
                          return match ? (
                            <SyntaxHighlighter
                              {...props}
                              style={atomDark}
                              language={match[1]}
                              PreTag="div"
                              className="rounded-md border border-border my-4"
                            >
                              {String(children).replace(/\n$/, '')}
                            </SyntaxHighlighter>
                          ) : (
                            <code {...props} className="bg-muted px-1.5 py-0.5 rounded text-sm">
                              {children}
                            </code>
                          );
                        },
                        ul: ({ node, ...props }) => (
                          <ul className="list-disc pl-6 my-3 space-y-2" {...props} />
                        ),
                        ol: ({ node, ...props }) => (
                          <ol className="list-decimal pl-6 my-3 space-y-2" {...props} />
                        ),
                        blockquote: ({ node, ...props }) => (
                          <blockquote className="border-l-4 border-primary pl-4 italic my-4" {...props} />
                        ),
                      }}
                    >
                      {analysis}
                    </Markdown>
                  </CardContent>
                </Card>
              </div>
            ) : (
              <Card>
                <CardContent className="pt-6">
                  <div className="flex flex-col items-center justify-center space-y-2 text-center">
                    <AlertCircle className="h-8 w-8 text-muted-foreground" />
                    <p className="text-muted-foreground">No analysis available</p>
                  </div>
                </CardContent>
              </Card>
            )}
          </TabsContent>
        </Tabs>
      </DialogContent>
    </Dialog>
  );
}
